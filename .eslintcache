[{"D:\\School\\CS 480\\jr550-road-to-react\\src\\reportWebVitals.js":"1","D:\\School\\CS 480\\jr550-road-to-react\\src\\App.js":"2","D:\\School\\CS 480\\jr550-road-to-react\\src\\index.js":"3","D:\\School\\CS 480\\jr550-road-to-react\\src\\SearchForm.js":"4","D:\\School\\CS 480\\jr550-road-to-react\\src\\List.js":"5","D:\\School\\CS 480\\jr550-road-to-react\\src\\InputWithLabel.js":"6","D:\\School\\CS 480\\jr550-road-to-react\\src\\LastSearches.js":"7"},{"size":362,"mtime":499162500000,"results":"8","hashOfConfig":"9"},{"size":5803,"mtime":1613519157919,"results":"10","hashOfConfig":"9"},{"size":500,"mtime":1612911085443,"results":"11","hashOfConfig":"9"},{"size":584,"mtime":1613255330037,"results":"12","hashOfConfig":"9"},{"size":2563,"mtime":1613512719993,"results":"13","hashOfConfig":"9"},{"size":636,"mtime":1613254834857,"results":"14","hashOfConfig":"9"},{"size":435,"mtime":1613515814395,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"mvoq46",{"filePath":"19","messages":"20","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"21","usedDeprecatedRules":"18"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"18"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"D:\\School\\CS 480\\jr550-road-to-react\\src\\reportWebVitals.js",[],["34","35"],"D:\\School\\CS 480\\jr550-road-to-react\\src\\App.js",["36","37"],"import React from 'react';\r\nimport axios from 'axios';\r\nimport './App.css'\r\n\r\n\r\nimport SearchForm from './SearchForm';\r\nimport List from './List';\r\nimport LastSearches from './LastSearches'\r\n\r\nconst API_ENDPOINT = 'https://hn.algolia.com/api/v1/search?query=';\r\n\r\nconst API_BASE = 'https://hn.algolia.com/api/v1';\r\nconst API_SEARCH = '/search';\r\nconst PARAM_SEARCH = 'query=';\r\nconst PARAM_PAGE = 'page=';\r\n\r\nconst getUrl = (searchTerm, page) => \r\n  `${API_BASE}${API_SEARCH}?${PARAM_SEARCH}${searchTerm}&${PARAM_PAGE}${page}`;\r\n\r\n\r\n// Custom Hook used to keep state over page reloads\r\nconst useSemiPersistentState = (key, initialState) => {\r\n  const [value, setValue] = React.useState(\r\n    localStorage.getItem(key) || initialState\r\n  );\r\n\r\n  // Effect hook used to update the local storage whenver the key or value changes\r\n  React.useEffect(() => {\r\n    localStorage.setItem(key, value);\r\n  }, [value, key]);\r\n\r\n  return [value, setValue];\r\n};\r\n\r\n\r\n// Reducer function used to handle various state changes for displaying fetched stories\r\nconst storiesReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'STORIES_FETCH_INIT':\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n        isError: false,\r\n      };\r\n    case 'STORIES_FETCH_SUCCESS':\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        isError: false,\r\n        data: \r\n          action.payload.page === 0\r\n          ? action.payload.list\r\n          : state.data.concat(action.payload.list),\r\n        page: action.payload.page\r\n      };\r\n    case 'STORIES_FETCH_FAILURE':\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        isError: true,\r\n      };\r\n    case 'REMOVE_STORY':\r\n      return {\r\n        ...state,\r\n        data: state.data.filter(\r\n          story => action.payload.objectID !== story.objectID\r\n        ),\r\n      };\r\n    default:\r\n      throw new Error();\r\n  }\r\n};\r\n\r\nconst extractSearchTerm = url => \r\n  url.substring(url.lastIndexOf('?') + 1, url.lastIndexOf('&'))\r\n  .replace(PARAM_SEARCH, '');\r\n\r\n\r\nconst getLastSearches = urls =>\r\n  urls\r\n    .reduce((result, url, index) => {\r\n      const searchTerm = extractSearchTerm(url);\r\n\r\n      if (index === 0) {\r\n        return result.concat(searchTerm);\r\n      }\r\n\r\n      const previousSearchTerm = result[result.length - 1];\r\n\r\n      if (searchTerm === previousSearchTerm) {\r\n        return result;\r\n      } else {\r\n        return result.concat(searchTerm);\r\n      }\r\n    }, [])\r\n    .slice(-6).\r\n    slice(0, -1);\r\n\r\n\r\n\r\n\r\n// App Component\r\nconst App = () => {\r\n\r\n\r\n  // Use semiPersitentState custom hook to maintain searchTerm upon reload\r\n  const [searchTerm, setSearchTerm] = useSemiPersistentState(\r\n    'search',\r\n    'React'\r\n  );\r\n\r\n  // Sets a state hook for our urls used to fetch data from\r\n  const [urls, seturls] = React.useState([getUrl(searchTerm, 0)]);\r\n\r\n  // Reducer hook used to populate stories list\r\n  const [stories, dispatchStories] = React.useReducer(\r\n    storiesReducer,\r\n    { data: [], page: 0, isLoading: false, isError: false }\r\n  );\r\n\r\n  // Async Handler for fetching stories.\r\n  // Passes results to dispatchStories reducer hook.\r\n  // Automatically updates when urls is changed by manipulating searchTerm, called by effect hook.\r\n  const handleFetchStories = React.useCallback(async () => {\r\n    dispatchStories({ type: 'STORIES_FETCH_INIT' });\r\n\r\n    try {\r\n      const lastUrl = urls[urls.length - 1]\r\n      const result = await axios.get(lastUrl);\r\n\r\n      dispatchStories({\r\n        type: 'STORIES_FETCH_SUCCESS',\r\n        payload: {\r\n          list: result.data.hits,\r\n          page: result.data.page\r\n        }\r\n      });\r\n    } catch {\r\n      dispatchStories({ type: 'STORIES_FETCH_FAILURE' });\r\n    }\r\n  }, [urls]);\r\n\r\n  // Effect Hook used to call srories handler whenever urls is changed, which\r\n  // in turn causes the function signature of handleFetchStories to be updated,\r\n  // which then triggers the effect.\r\n  React.useEffect(() => {\r\n    handleFetchStories();\r\n  }, [handleFetchStories]);\r\n\r\n\r\n  // Remove story handler, passes instruction to stories reducer function.\r\n  const handleRemoveStory = item => {\r\n    dispatchStories({\r\n      type: 'REMOVE_STORY',\r\n      payload: item,\r\n    });\r\n  };\r\n\r\n  // Search Input handler\r\n  const handleSearchInput = event => {\r\n    setSearchTerm(event.target.value);\r\n  };\r\n\r\n  // Submission handler\r\n  const handleSearchSubmit = event => {\r\n    handleSearch(searchTerm, 0);\r\n\r\n    event.preventDefault();\r\n  };\r\n\r\n  const handleLastSearch = searchTerm => {\r\n    setSearchTerm(searchTerm);\r\n    handleSearch(searchTerm, 0);\r\n  };\r\n\r\n  const handleSearch = (searchTerm, page) => {\r\n    const url = getUrl(searchTerm, page);\r\n    seturls(urls.concat(url));\r\n  };\r\n\r\n  const handleMore = () => {\r\n    const lastUrl = urls[urls.length - 1];\r\n    const searchTerm = extractSearchTerm(lastUrl);\r\n    handleSearch(searchTerm, stories.page + 1);\r\n  };\r\n\r\n  \r\n\r\n\r\n  const lastSearches = getLastSearches(urls);\r\n\r\n  // App element to be returned and displayed as webpage\r\n  return (\r\n    <div className=\"container\">\r\n      <h1 className=\"headline-primary\">My Hacker Stories</h1>\r\n\r\n      <SearchForm\r\n        searchTerm={searchTerm}\r\n        onSearchInput={handleSearchInput}\r\n        onSearchSubmit={handleSearchSubmit}\r\n      />\r\n\r\n      <LastSearches\r\n        lastSearches={lastSearches}\r\n        onLastSearch={handleLastSearch}\r\n      />\r\n\r\n      <hr />\r\n\r\n      {stories.isError && <p>Something went wrong ...</p>}\r\n      \r\n      <List list={stories.data} onRemoveItem={handleRemoveStory} />\r\n      \r\n      {stories.isLoading ? (\r\n        <p>Loading ...</p>\r\n      ) : (\r\n        <button type=\"button\" onClick={handleMore}>\r\n          More\r\n        </button>\r\n      )}\r\n\r\n      \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","D:\\School\\CS 480\\jr550-road-to-react\\src\\index.js",[],"D:\\School\\CS 480\\jr550-road-to-react\\src\\SearchForm.js",[],"D:\\School\\CS 480\\jr550-road-to-react\\src\\List.js",["38","39"],"import React from 'react';\r\nimport './App.css'\r\nimport { sortBy } from 'lodash';\r\n\r\nconst SORTS = {\r\n  NONE: list => list,\r\n  TITLE: list => sortBy(list, 'title'),\r\n  AUTHOR: list => sortBy(list, 'author'),\r\n  COMMENT: list => sortBy(list, 'num_comments'),\r\n  POINT: list => sortBy(list, 'points')\r\n};\r\n\r\n\r\n\r\n//List Component\r\nconst List = ({ list, onRemoveItem }) => {\r\n\r\n  const [sort, setSort] = React.useState({\r\n    sortKey: 'NONE',\r\n    isReverse: false\r\n  });\r\n\r\n \r\n\r\n  const handleSort = sortKey => {\r\n    const isReverse = sort.sortKey === sortKey && !sort.isReverse;\r\n    setSort({sortKey, isReverse});\r\n  }\r\n\r\n  const sortFunction = SORTS[sort.sortKey];\r\n  const sortedList = sort.isReverse\r\n  ? sortFunction(list).reverse()\r\n  : sortFunction(list);\r\n\r\n\r\n\r\n\r\n  {/* List Element Structure */}\r\n\r\n  return (\r\n    <div>\r\n      <div style={{ display: 'flex'}}>\r\n        <span style={{ width: '40%'}}>\r\n          <button type=\"button\" onClick={() => handleSort('TITLE')} className=\"button\">\r\n            Title\r\n          </button>\r\n        </span>\r\n        <span style={{ width: '30%'}}>\r\n          <button type=\"button\" onClick={() => handleSort('AUTHOR')} className=\"button\">\r\n            Author\r\n          </button>\r\n        </span>\r\n        <span style={{ width: '10%'}}>\r\n          <button type=\"button\" onClick={() => handleSort('COMMENT')} className=\"button\">\r\n            Comments\r\n          </button>\r\n        </span>\r\n        <span style={{ width: '10%'}}>\r\n          <button type=\"button\" onClick={() => handleSort('POINT')} className=\"button\">\r\n            Points\r\n          </button>\r\n        </span>\r\n        <span style={{ width: '10%'}}>Actions</span>\r\n      </div>\r\n    \r\n      {/* Get item element for every entry in sortedList */}\r\n      {sortedList.map(item => (\r\n        <Item\r\n          key={item.objectID}\r\n          item={item}\r\n          onRemoveItem={onRemoveItem}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\n{/**Item Element Structure */}\r\n\r\nconst Item = ({ item, onRemoveItem }) => (\r\n  <div style={{ display: 'flex' }} className=\"item\">\r\n    <span style={{ width: '40%'}}>\r\n      <a href={item.url}>{item.title}</a>\r\n    </span>\r\n    <span style={{ width: '30%'}}>{item.author}</span>\r\n    <span style={{ width: '10%'}}>{item.num_comments}</span>\r\n    <span style={{ width: '10%'}}>{item.points}</span>\r\n    <span style={{ width: '10%'}}>\r\n      <button type=\"button\" onClick={() => onRemoveItem(item)} className=\"button buttonSmall\">\r\n        Dismiss\r\n      </button>\r\n    </span>\r\n  </div>\r\n);\r\n\r\nexport default List;\r\n","D:\\School\\CS 480\\jr550-road-to-react\\src\\InputWithLabel.js",[],["40","41"],"D:\\School\\CS 480\\jr550-road-to-react\\src\\LastSearches.js",[],{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","severity":1,"message":"47","line":10,"column":7,"nodeType":"48","messageId":"49","endLine":10,"endColumn":19},{"ruleId":"50","severity":1,"message":"51","line":96,"column":15,"nodeType":"52","messageId":"53","endLine":96,"endColumn":16,"fix":"54"},{"ruleId":"55","severity":1,"message":"56","line":38,"column":3,"nodeType":"57","messageId":"58","endLine":38,"endColumn":33},{"ruleId":"55","severity":1,"message":"59","line":80,"column":1,"nodeType":"57","messageId":"60","endLine":80,"endColumn":31},{"ruleId":"42","replacedBy":"61"},{"ruleId":"44","replacedBy":"62"},"no-native-reassign",["63"],"no-negated-in-lhs",["64"],"no-unused-vars","'API_ENDPOINT' is assigned a value but never used.","Identifier","unusedVar","dot-location","Expected dot to be on same line as property.","MemberExpression","expectedDotBeforeProperty",{"range":"65","text":"66"},"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","Block is redundant.","redundantBlock",["63"],["64"],"no-global-assign","no-unsafe-negation",[2485,2492],"\r\n    ."]